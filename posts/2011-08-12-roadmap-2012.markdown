--
title: Foretelling Future Development
keywords: clojure, objective-c, stanford
tags: clojure, objective-c
description: The roadmap I'm going to follow in 2012.
--

I started running a few weeks ago and I hated it. Couldn't stop cursing while running -- stupid thing to do, since I needed the oxygen -- and hoping that in time it would be better. In only four weeks, I'm already cursing less and maybe, eventually, I will start to like it, probably not the running itself, but the shower, pyama's and book afterwards.

The running experience sounded like a good analogy for what I'm going to describe in this post. Step out of the comfort zone, invest and reap the benefits. Years ago, I went from PHP to Python, now to Objective-C and Clojure. The difference with running is that I don't expect to curse about that which follows. Ofcourse, I expect the occasional outburst of "Dammit, I could be building a random-pirate-jokalizer in Python!"[^1].

But I don't want Python to be the final pen which writes my bits and bytes. I need a different tool for a different use. Just like Steve Yegge, I want to evolve and tackle problems, not supply entertainment, no seconds on Facebook. This got me thinking about where I wanted to be, and how I could get there. I can already write to you that it involves the strange combination of Clojure, Objective-C, Artificial Intelligence and S.I.C.P.

[^1]: Don't get me wrong, I love Python and plan to keep using it. I do think other languages are better suited for the things I describe in this post. And also, Pirate jokes are awesome. Don't believe me? Send me a PM on IRC and I will proof you wrong.

## Objective-C and Clojure

The best software is software that let's you do difficult things through a simple interface[^2]. An example of this is [Dropbox] and [Lion's Filevault]. For creating beautiful interfaces, I believe Apple's [Cocoa] framework is miles ahead of the competition (I'm looking at you HTML5 and Android SDK). Uniformity, smooth effects (those with function) and the overall quality of the Cocoa library make it a competition which is judged by the eyes. Programming with the Cocoa framework requires the knowledge of the [Objective-C] language. That's also the sole reason I learned the Objective-C language with the  excellent "[Programming iOS 4]" book.

I also think that software that's connected to the internet will become even more proliferate than it is now. More sharing of data between users, synchronisation of devices or outsourcing computations to servers. This requires communication with servers, communication guided by the [REST] architecture. This is where Clojure comes into play.

Clojure is the thinking part of the software stack. The thinking could happen in any language, but I see the benefits of a functional language as Clojure. To drop a few on you: high concurrency, pure functions and meta programming.[^3] There isn't any line in the Clojure codebase that is responsible for a visual representation of the data, we have Cocoa running on a separate device for that. By keeping Clojure responsible for the data and the computation it performs on it, we can operate on bigger scale by spreading the load on the developers home turf, namely servers. Thus the user doesn't need a fast device to operate on difficult problems we as developers can solve for them. A good stack for solving interesting problems, but which problems?

[^2]: "Simple interfaces, spicy code", that's our motto at [Bread & Pepper]!

[^3]: I would love to make this post even longer and try to convince you about the advantages of functional programming, but much more seasoned programmers than me can do a better job at that. If your interests are peaked, view [this presentation] from Rich Hickey, the creater of Clojure.

[Bread & Pepper]: http://www.breadandpepper.com "Homepage of Bread & Pepper"
[Dropbox]: http://www.dropbox.com "Dropbox's Homepage"
[Lion's Filevault]: http://reviews.cnet.com/8301-13727_7-20081045-263/about-filevault-2-in-os-x-10.7-lion/ "CNET explains Filevault 2"
[Cocoa]: https://secure.wikimedia.org/wikipedia/en/wiki/Cocoa_%28API%29 "Wikipedia article of Cocoa"
[Objective-C]: http://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/ObjectiveC/Introduction/introObjectiveC.html "Introduction to Objective-C by Apple"
[Programming iOS 4]: http://www.amazon.com/dp/1449388434/?tag=wunki-20 "Programming iOS 4 on Amazon."
[REST]: https://secure.wikimedia.org/wikipedia/en/wiki/Representational_State_Transfer "Wikipedia page explaining REST"
[this presentation]: http://wiki.jvmlangsummit.com/images/a/ab/HickeyJVMSummit2009.pdf "PDF Slides of Rich Hickey's talk about Clojure"

## Knowledge is the catalyst of ideas

I couldn't help but to feel inspired by the fifteen minute talk that Steve Yegge gave at Oscon '11 called "[What Would you do With Your own Google]". In it he rallies his fellow developers to stop creating the next Facebook or website's showing dancing kittens. To show he's serious, he resigns himself from the [Google+] project and start's learning about mathematics, data mining and statistics so he can tackle the harder challenges that are still there. This inspired me because I'm guilty of the accused. Besides my final thesis -- exploring terrorism on the web through automated sentiment analysis -- I have only solved non-trivial problems with my programming knowledge. I'm not flogging myself about it, because dancing kittens still pay the bill, but I do want to see growth in the difficulty and social responsibility that my knowledge brings. To get inspiration about what to build and how to do it, I selected two courses which I think will help me.

October 10th is the start of Stanford's course called "[Introduction to Artificial Intelligence]". It's a free course given by [Sebastion Thrun] and [Peter Norvig], writers of the "[Artificial Intelligence, A Modern Approach]" book. An experiment which gives you the possibility to follow the course together with the Stanford students, do the homework and assignements and even be graded. I see it as an opportunity to learn more about statistics and get awed by the possibilities of artificial intelligence.

After following the above course I would like to learn more about the fundaments of computing by working through the famous "[Structure and Interpretation of Computer Programs]" book. This has been on my bucket list for a while, but only recently have I learned to focus enough to follow through with these kind of discipline requiring tasks. I don't know what I will learn from this book, but I'm certain that it will make me a better programmer.

[What would you do with your own Google]: http://www.youtube.com/watch?v=vKmQW_Nkfk8 "Video of the presentation at Youtube"
[Google+]: https://plus.google.com/ "Google+ homepage"
[Introduction to Artificial Intelligence]: http://www.ai-class.com/ "Homepage of the free course"
[Sebastion Thrun]: https://secure.wikimedia.org/wikipedia/en/wiki/Sebastian_Thrun "Wikipedia article about Sebastion Thrun"
[Peter Norvig]: https://secure.wikimedia.org/wikipedia/en/wiki/Peter_Norvig "Wikipedia article about Peter Norvig"
[Artificial Intelligence, A Modern Approach]: http://www.amazon.com/dp/0136042597/?tag=wunki-20 "Amazon page of the third edition"
[Structure and Interpretation of Computer Programs]: http://www.amazon.com/dp/0070004846/?tag=wunki-20 "Amazon page of the second edition"

## Conclusion

And there you have it, in the above paragraphs I have shown the materials to build my ideal development trajectory for the coming months, or who knows, maybe years. Creating simple and beautiful ("weiniger aber besser"[^4]) software which solves difficult problems. I'm scarred enough to know that ideals are there to be compromised, but wise enough to keep trying to reach them. If you want to know how I'm doing, please follow me on this blog or my [Twitter].

[^4]: Famous quote from [Dieter Rams] which get's called at least once a day by my good friend and collegaue [Wouter de Bres].

[Dieter Rams]: https://secure.wikimedia.org/wikipedia/en/wiki/Dieter_Rams "Wikipedia article about Dieter Rams"
[Wouter de Bres]: http://wdeb.nl "Homepage of Wouter de Bres"
[Twitter]: http://twitter.com/#!/wunki_ "My Twitter account"


